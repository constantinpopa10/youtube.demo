package apache.commons.commons;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.InvocationTargetException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.ComparatorUtils;
import org.apache.commons.collections4.FunctorException;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.TransformedBag;
import org.apache.commons.collections4.comparators.NullComparator;
import org.apache.commons.collections4.keyvalue.MultiKey;
import org.apache.commons.lang3.StringUtils;

import apache.commons.commons.SimpleClosure.Gender;
import apache.commons.commons.SimpleClosure.State;

public class MagicBagOfTricks
{
  @SuppressWarnings({ "rawtypes", "unchecked" })
public static void main(String[] args) throws IOException, InvocationTargetException, NoSuchMethodException, IllegalAccessException
  {
    List<LaborForce> list = new ArrayList<LaborForce>();
    URL url = new URL("http", "1796193846474123283-a-1802744773732722657-s-sites.googlegroups.com", 80, "/site/psenger/Home/data.txt");
    BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
    String str;
    if (((str = in.readLine()) != null))
    {
      do
      {
        String[] strings = str.split("\t");
        strings = StringUtils.stripAll(strings);

        State state = State.valueOf(StringUtils.trim(strings[0]));
        Gender gender = "Male".equals(StringUtils.trim(strings[1])) ? Gender.Male : Gender.Female;
        Integer year = Integer.valueOf(StringUtils.trim(strings[2]));

        list.add(new LaborForce(state, gender, year));
      } while ((str = in.readLine()) != null);
    }
    in.close();

    Map map = PropertyUtils.describe(new LaborForce());
    Set s = map.keySet();
    s.remove("class");
    System.out.println("All the possible properties on the LaborForce bean are [" + StringUtils.join(s.toArray(),",") + "]");

    Bag masterBag = new HashBag();
    Bag genderBag = TransformedBag.transformedBag(masterBag, new PropertiesMultiKeyTransformer( new String[]{ "gender" } ) );
    Bag genderYearBag = TransformedBag.transformedBag(masterBag, new PropertiesMultiKeyTransformer( new String[]{ "gender", "year" } ) );
    Bag genderYearStateBag = TransformedBag.transformedBag(masterBag, new PropertiesMultiKeyTransformer( new String[]{ "gender", "year" , "state" } ) );

    genderBag.addAll( list );
    genderYearBag.addAll( list );
    genderYearStateBag.addAll( list );

    Comparator comparator = ComparatorUtils.chainedComparator(new Comparator[]{new MultiKeyCompartor(0),new MultiKeyCompartor(1),new MultiKeyCompartor(2)});
    Set<MultiKey> set = new TreeSet<MultiKey>(comparator);
    set.addAll(masterBag.uniqueSet());
    for (MultiKey multiKey : set)
    {
      System.out.println( "[" +StringUtils.join(multiKey.getKeys(),',') + "] = " + masterBag.getCount(multiKey));
    }
  }
  private static class PropertiesMultiKeyTransformer implements Transformer<Object, Object>
  {
    String[] methodNames;
    private PropertiesMultiKeyTransformer(String[] methodNames)
    {
      this.methodNames = methodNames;
    }
    public Object transform(Object o)
    {
      List<Object> ooos = new ArrayList<Object>();
      for (String methodName : methodNames)
      {
        try
        {
          ooos.add(PropertyUtils.getProperty(o, methodName));
        }
        catch (Exception e)
        {
          throw new FunctorException(e);
        }
      }
      return new MultiKey(ooos.toArray(new Object[ooos.size()]));
    }
  }
  private static class MultiKeyCompartor implements Comparator<MultiKey>
  {
    private int i;
    private MultiKeyCompartor(int i)
    {
      this.i = i;
    }
    public int compare(MultiKey o1, MultiKey o2)
    {
      Object[] keys1 = o1.getKeys();
      Object[] keys2 = o2.getKeys();
      Object oo1 = null;
      try
      {
        oo1 = keys1[i];
      }
      catch (ArrayIndexOutOfBoundsException e)
      {
      }
      Object oo2 = null;
      try
      {
        oo2 = keys2[i];
      }
      catch (ArrayIndexOutOfBoundsException e)
      {
      }
      NullComparator nullComparator = new NullComparator(false);
      return nullComparator.compare(oo1, oo2);
    }
  }
}
class LaborForce
{
  private State state;
  private Gender gender;
  private int year;
  public LaborForce()
  {
  }
  public LaborForce(State state, Gender gender, int year)
  {
    this.state = state;
    this.gender = gender;
    this.year = year;
  }
  public State getState()
  {
    return state;
  }
  public void setState(State state)
  {
    this.state = state;
  }
  public Gender getGender()
  {
    return gender;
  }
  public void setGender(Gender gender)
  {
    this.gender = gender;
  }
  public int getYear()
  {
    return year;
  }
  public void setYear(int year)
  {
    this.year = year;
  }
}